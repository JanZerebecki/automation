---

- import_playbook: _create-vcloud-inventory.yml

- name: Disable DHCP on the cloud infra management network
  hosts: localhost
  connection: local
  tasks:
    - name: Disable DHCP on the cloud infra management network
      command: |
        openstack --os-cloud {{ os_cloud }} --os-project-name {{ os_project_name }} \
          subnet set --no-dhcp \
          {{ cloud_env }}-cloud_management_subnet

- name: Register crowbar cloud nodes
  hosts: cloud_virt_hosts
  any_errors_fatal: true
  remote_user: root
  gather_facts: False
  vars:
    task: "register"

  tasks:
    - block:
        - include_role:
            name: crowbar_update
          when:
            - not update_after_deploy
            - maint_updates_list | length

        - include_role:
            name: crowbar_register
        - include_role:
            name: crowbar_setup
          vars:
            qa_crowbarsetup_cmd: "onadmin_allocate"

        # Need to wait until SLESHammer finishes running and reboot the nodes
        # 2 minutes should be more than enough for that
        - name: Wait for nodes to be ready to install the OS
          pause:
            minutes: 2
          when: pxe_boot_enabled

        # The iPXE image expects to install the OS on its first boot through PXE, however on
        # Crowbar it boots SLESHammer which clears the machine disks (deleting the iPXE image).
        # This gets the instance stuck on 'Booting from Hard Drive'. A way to work around that is
        # rebuilding the instances which makes it boot through PXE again and installs the OS.
        - name: Rebuild crowbar nodes when PXE boot enabled
          command: |
            openstack --os-cloud {{ os_cloud }} --os-project-name {{ os_project_name }} \
              server rebuild {{ item }}
          loop: "{{ groups['cloud_virt_hosts'] }}"
          when: pxe_boot_enabled
          delegate_to: localhost
          run_once: True

        - include_role:
            name: crowbar_setup
          vars:
            qa_crowbarsetup_cmd: "onadmin_{{ command }}"
          loop:
            - waitcloud
            - post_allocate
            - setup_aliases
          loop_control:
            loop_var: command

      rescue:
        - include_role:
            name: rocketchat_notify
            apply:
              delegate_to: "{{ cloud_env }}"
          vars:
            rc_action: "finished"
            rc_state: "Failed"
          when: rc_notify

        - name: Stop if something failed
          fail:
            msg: "{{ task }} failed."
